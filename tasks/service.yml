---
# linux_postinstall service

# [TODO] add list of services, e.g. tlp and nm 'lp_' ~ item ~ '_services'

- name: "service: Debug"
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      ansible_service_mgr: {{ ansible_service_mgr }}
      lp_service_sanity: {{ lp_service_sanity }}

      lp_service_module: {{ lp_service_module }}
      lp_service_module_valid: {{ lp_service_module_valid }}

      lp_service:
        {{ lp_service|to_nice_yaml(indent=2)|indent(2) }}
      lp_service_auto:
        {{ lp_service_auto|to_nice_yaml(indent=2)|indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_service_debug|bool
  tags: lp_service_debug

- name: Sanity
  block:

    - name: "service: Get service facts"
      ansible.builtin.service_facts:

    - name: "service: Sanity lp_service_auto items are defined"
      ansible.builtin.assert:
        that: my_services_undef|length == 0
        fail_msg: "[ERR] Undefined services: {{ my_services_undef }}"
        success_msg: "[OK]  All service names in lp_service_auto are valid."
        quiet: "{{ lp_service_sanity_quiet }}"
      when: lp_service_auto|length > 0
      vars:
        my_services_alias: "{{ lp_service_auto }}"

    - name: "service: Sanity lp_service names are defined"
      ansible.builtin.assert:
        that: my_services_undef|length == 0
        fail_msg: "[ERR] Undefined services: {{ my_services_undef }}"
        success_msg: "[OK]  All service names in lp_service are valid."
        quiet: "{{ lp_service_sanity_quiet }}"
      when: lp_service|length > 0
      vars:
        my_services_alias: "{{ lp_service|map(attribute='name') }}"

    - name: "service: Sanity lp_service_module"
      ansible.builtin.assert:
        that: lp_service_module in lp_service_module_valid
        fail_msg: "[ERR] {{ lp_service_module }} not in {{ lp_service_module_valid }}"
        success_msg: "[OK]  {{ lp_service_module }} is valid value of lp_service_module."
        quiet: "{{ lp_service_sanity_quiet }}"

  when: lp_service_sanity|bool
  tags: lp_service_sanity

- name: Automatic management of listed services
  block:

    - name: "service: Automatic management of listed services"
      ansible.builtin.service:
        name: "{{ srv_name }}"
        state: "{{ srv_stat }}"
        enabled: "{{ srv_enbl|bool }}"
        use: "{{ use_modl }}"
      loop: "{{ lp_service_auto }}"
      loop_control:
        label: "{{ srv_name }} enabled={{ srv_enbl }} state={{ srv_stat }} use={{ use_modl }}"
      register: result
      when: run_task
      notify: "reload {{ ansible_service_mgr }} daemon"
      vars:
        run_task: "{{ lookup('vars', 'lp_' ~ item, default=false) }}"
        srv_name: "{{ lookup('vars', 'lp_' ~ item ~ '_service', default=item) }}"
        srv_enbl: "{{ lookup('vars', 'lp_' ~ item ~ '_enable', default=false) }}"
        use_modl: "{{ lookup('vars', 'lp_' ~ item ~ '_module', default='auto') }}"
        srv_stat: "{{ lookup('vars', 'lp_' ~ item ~ '_state', default=default_stat) }}"
        default_stat: "{{ srv_enbl|bool|ternary('started', 'stopped') }}"

    - name: "service: Debug"
      ansible.builtin.include_tasks: fn/service-debug.yml

  when: lp_service_auto|length > 0
  tags: lp_service_auto

- name: Manual management of listed services
  block:

    - name: "service: Manual management set module auto"
      set_fact:
        lp_service_module: "{{ ansible_service_mgr }}"
      when: lp_service_module == 'auto'

    - name: "service: Include {{ lp_service_module }}"
      include_tasks: "fn/service-{{ lp_service_module }}.yml"

  when: lp_service|length > 0
  tags: lp_service_manual

- name: "service: Flush handlers"
  ansible.builtin.meta: flush_handlers
  tags:
    - lp_service_auto
    - lp_service_manual

# EOF
...
