---
# linux_postinstall passwords

- name: "passwords: Debug"
  vars:
    msg: |-
      lp_passwords_fail_gracefully: {{ lp_passwords_fail_gracefully }}
      lp_password_update_password: {{ lp_password_update_password }}
      lp_users:
      {% if lp_passwords_debug_classified|bool %}
        {{ lp_users|default([])|to_nice_yaml|indent(2) }}
      {% else %}
      {% for user in lp_users|default([]) %}
        - userpass: ************
      {% for k,v in user.items() %}
      {% if k not in ['userpass'] %}
          {{ k }}: {{ v }}
      {% endif %}
      {% endfor %}
      {% endfor %}
      {% endif %}

      lp_passwordstore: {{ lp_passwordstore }}
      lp_passwordstore_install: {{ lp_passwordstore_install }}
      lp_passwordstore_debug: {{ lp_passwordstore_debug }}
      lp_passwordstore_backup: {{ lp_passwordstore_backup }}
      lp_passwordstore_create: {{ lp_passwordstore_create }}
      lp_passwordstore_length: {{ lp_passwordstore_length }}
      lp_passwordstore_nosymbols: {{ lp_passwordstore_nosymbols }}
      lp_passwordstore_overwrite: {{ lp_passwordstore_overwrite }}
      lp_passwordstore_passwordstore: {{ lp_passwordstore_passwordstore }}
      lp_passwordstore_returnall : {{ lp_passwordstore_returnall }}
      lp_passwordstore_subkey: {{ lp_passwordstore_subkey }}
      lp_passwordstore_idempotent_password_hash: {{ lp_passwordstore_idempotent_password_hash }}
      lp_passwordstore_packages:
        {{ lp_passwordstore_packages|to_nice_yaml|indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_passwords_debug|bool
  tags: lp_passwords_debug

- name: "passwords: Passwordstore"
  block:
    - name: "passwords: Passwordstore: Install packages"
      ansible.builtin.include_tasks: fn/install-package.yml
      loop:
        - "{{ lp_passwordstore_packages }}"
        - "{{ lp_gpg_packages }}"
        - "{{ lp_gpg_packages_extra }}"
      vars:
        my_delegate_to_localhost: true
      run_once: true
      when: lp_passwordstore_install|bool
    - name: "passwords: Passwordstore: Retrieve, create, or update userpass"
      ansible.builtin.include_role:
        name: vbotka.ansible_lib
        tasks_from: al_pws_user_host.yml
      vars:
        al_pws_debug: "{{ lp_passwordstore_debug }}"
        al_pws_backup: "{{ lp_passwordstore_backup }}"
        al_pws_create: "{{ lp_passwordstore_create }}"
        al_pws_length: "{{ lp_passwordstore_length }}"
        al_pws_nosymbols: "{{ lp_passwordstore_nosymbols }}"
        al_pws_overwrite: "{{ lp_passwordstore_overwrite }}"
        al_pws_passwordstore: "{{ lp_passwordstore_passwordstore }}"
        al_pws_returnall: "{{ lp_passwordstore_returnall }}"
        al_pws_subkey: "{{ lp_passwordstore_subkey }}"
        al_pws_idempotent_password_hash: "{{ lp_passwordstore_idempotent_password_hash }}"
        al_pws_query: "{{ lp_users }}"
      register: result
    - name: "passwords: Passwordstore: Create empty list my_passwords"
      ansible.builtin.set_fact:
        my_passwords: []
      no_log: true  # no-log-password password should not be logged.
    - name: "passwords: Passwordstore: Create my_passwords"
      ansible.builtin.set_fact:
        my_passwords: "{{ my_passwords +
                          [item|dict2items|
                          rejectattr('key', 'equalto', 'userpass')|
                          list|items2dict|
                          combine({'update_password': lp_password_update_password})] }}"
      loop: "{{ al_pws_query_result }}"
      loop_control:
        label: "{{ item.name }}"
      no_log: true  # no-log-password password should not be logged.
    - name: "passwords: Passwordstore: Debug my_passwords"
      ansible.builtin.debug:
        var: my_passwords
      when: lp_passwords_debug|bool
    - name: "passwords:  Passwordstore: Include users"
      ansible.builtin.include_tasks: users.yml
      vars:
        lp_users: "{{ my_passwords }}"
  rescue:
    - name: "passwords: Passwordstore: Debug fail"
      ansible.builtin.debug:
        var: result
      when: lp_passwords_debug_classified|bool
    - name: "passwords: Passwordstore: Fail"
      ansible.builtin.fail:
        msg: "[ERROR] Passwordstore failed."
      when: not lp_passwords_fail_gracefully|bool
  when: lp_passwordstore|bool
  tags: lp_passwords_passwordstore

#  EOF
...
