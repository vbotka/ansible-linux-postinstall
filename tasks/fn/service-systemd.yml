---
# linux_postinstall function service-systemd

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_service_module.html#notes
# Quoting from Notes: The order of execution when having multiple
# properties is to first enable/disable, then mask/unmask and then
# deal with service state. It has been reported that systemctl can
# behave differently depending on the order of operations if you do
# the same manually.

- name: "service:systemd"
  block:

    - name: "service:systemd: enable/disable"
      ansible.builtin.systemd:
      loop: "{{ _enabld }}"
      loop_control:
        label: "{{ item.name }} enabled={{ enabled }}"
      register: result
      notify: reload systemd daemon
    - name: "service:systemd: Debug"
      ansible.builtin.include_tasks: fn/service-debug.yml
      when: _enabld|length > 0
    - name: "service:systemd: Flush handlers"
      ansible.builtin.meta: flush_handlers
      when: _enabld|length > 0

    - name: "service:systemd: mask/unmask"
      ansible.builtin.systemd:
      loop: "{{ _masked }}"
      loop_control:
        label: "{{ item.name }} enabled={{ enabled }} masked={{ masked }}"
      register: result
      notify: reload systemd daemon
    - name: "service:systemd: Debug"
      ansible.builtin.include_tasks: fn/service-debug.yml
      when: _masked|length > 0
    - name: "service:systemd: Flush handlers"
      ansible.builtin.meta: flush_handlers
      when: _masked|length > 0

    - name: "service:systemd: all"
      ansible.builtin.systemd:
      loop: "{{ lp_service }}"
      loop_control:
        label: "{{ item.name }} enabled={{ enabled }} masked={{ masked }} state={{ state }}"
      register: result
      notify: reload systemd daemon
    - name: "service:systemd: Debug"
      ansible.builtin.include_tasks: fn/service-debug.yml
      when: lp_service|length > 0

  module_defaults:

    ansible.builtin.systemd:
      name: "{{ item.name|default(omit) }}"
      daemon_reexec: "{{ item.daemon_reexec|default(omit) }}"
      daemon_reload: "{{ item.daemon_reload|default(omit) }}"
      enabled: "{{ item.enabled|default(omit) }}"
      force: "{{ item.force|default(omit) }}"
      masked: "{{ item.masked|default(omit) }}"
      no_block: "{{ item.no_block|default(omit) }}"
      scope: "{{ item.scope|default(omit) }}"
      state: "{{ item.state|default(omit) }}"

  vars:

    _enabld: "{{ lp_service|selectattr('enabled', 'defined')|
                            ansible.utils.remove_keys(target=['masked', 'state']) }}"
    _masked: "{{ lp_service|selectattr('masked', 'defined')|
                            ansible.utils.remove_keys(target=['state']) }}"
    enabled: "{{ item.enabled|d('UNDEFINED') }}"
    masked: "{{ item.masked|d('UNDEFINED') }}"
    state: "{{ item.state|d('UNDEFINED') }}"

# EOF
...
