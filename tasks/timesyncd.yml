---
# linux_postinstall timesyncd

- name: "timesyncd: Debug lp_timesyncd_debug={{ lp_timesyncd_debug }}"
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      ansible_distribution: {{ ansible_distribution }}
      ansible_distribution_version: {{ ansible_distribution_version }}
      ansible_distribution_release: {{ ansible_distribution_release }}

      lp_backup_conf: {{ lp_backup_conf }}

      lp_timesyncd_enable: {{ lp_timesyncd_enable }}
      lp_timesyncd_service: {{ lp_timesyncd_service }}
      lp_timesyncd_service_exists_fatal: {{ lp_timesyncd_service_exists_fatal }}
      lp_timesyncd_conf_file: {{ lp_timesyncd_conf_file }}
      lp_timesyncd_conf_file_orig: {{ lp_timesyncd_conf_file_orig }}
      lp_timesyncd_conf_template: {{ lp_timesyncd_conf_template }}
      lp_timesyncd_ntp: {{ lp_timesyncd_ntp }}
      lp_timesyncd_fallbackntp: {{ lp_timesyncd_fallbackntp }}
      lp_timesyncd_rootdistancemaxsec: {{ lp_timesyncd_rootdistancemaxsec }}
      lp_timesyncd_pollintervalminsec: {{ lp_timesyncd_pollintervalminsec }}
      lp_timesyncd_pollintervalmaxsec: {{ lp_timesyncd_pollintervalmaxsec }}
      lp_timesyncd_connectionretrysec: {{ lp_timesyncd_connectionretrysec }}
      lp_timesyncd_saveintervalsec: {{ lp_timesyncd_saveintervalsec }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_timesyncd_debug|bool
  tags: lp_timesyncd_debug

- name: "timesyncd: Get Service facts"
  ansible.builtin.service_facts:
  tags: [lp_timesyncd_exists, lp_timesyncd_conf, lp_timesyncd_sanity, lp_timesyncd_service]

- name: "timesyncd: Set lp_timesyncd_service_exists/found={{ exists ~ '/' ~ found }}"
  ansible.builtin.set_fact:
    lp_timesyncd_service_exists: "{{ exists }}"
    lp_timesyncd_service_found: "{{ found }}"
  vars:
    service: "{{ lp_timesyncd_service | splitext | first }}.service"
    exists: "{{ service in ansible_facts.services }}"
    found:  "{{ ansible_facts.services[service]['status'] != 'not-found' }}"
  tags: [lp_timesyncd_exists, lp_timesyncd_conf, lp_timesyncd_sanity, lp_timesyncd_service]

- name: "timesyncd: Debug lp_timesyncd_service lp_timesyncd_debug={{ lp_timesyncd_debug }}"
  ansible.builtin.debug:
    msg: |
      lp_timesyncd_service_exists: {{ lp_timesyncd_service_exists }}
      lp_timesyncd_service_found: {{ lp_timesyncd_service_found }}
      {% if lp_timesyncd_service_exists %}
      {{ service }}:
        {{ ansible_facts.services[service] | to_nice_yaml(indent=2) | indent(2) }}
      {% endif %}
  vars:
    service: "{{ lp_timesyncd_service | splitext | first }}.service"
  when: lp_timesyncd_debug | bool
  tags: lp_timesyncd_sanity

- name: "timesyncd: Assert exists and found {{ lp_timesyncd_service }}"
  ansible.builtin.assert:
    that:
      - lp_timesyncd_service_exists
      - lp_timesyncd_service_found
  when: lp_timesyncd_service_exists_fatal | bool
  tags: lp_timesyncd_sanity

- name: "timesyncd: Keep original {{ lp_timesyncd_conf_file }}"
  ansible.builtin.copy:
    src: "{{ lp_timesyncd_conf_file }}"
    dest: "{{ lp_timesyncd_conf_file }}.orig"
    remote_src: true
    force: false
  when: lp_timesyncd_conf_file_orig | bool
  tags: lp_timesyncd_conf_orig

- name: "timesyncd: Configure {{ lp_timesyncd_conf_file }}"
  ansible.builtin.template:
    src: "{{ lp_timesyncd_conf_template }}"
    dest: "{{ lp_timesyncd_conf_file }}"
    owner: root
    group: root
    mode: '0644'
    backup: "{{ lp_backup_conf }}"
  notify: restart timesyncd
  tags: lp_timesyncd_conf

- name: "timesyncd: Set state/status {{ state ~ '/' ~ enable }}"
  ansible.builtin.service:
    name: "{{ lp_timesyncd_service }}"
    state: "{{ state }}"
    enabled: "{{ enabled }}"
  register: result
  vars:
    enabled: "{{ lp_timesyncd_enable | bool | d(false) }}"
    default_state: "{{ enabled | ternary('started', 'stopped') }}"
    state: "{{ lp_timesyncd_state | d(default_state) }}"
    enable: "{{ enabled | ternary('enabled', 'disabled') }}"
  when: lp_timesyncd_service_found
  tags: lp_timesyncd_service

- name: "timesyncd: Debug set state/status result lp_timesyncd_debug2={{ lp_timesyncd_debug2|d(false)|bool }}"
  ansible.builtin.debug:
    var: result
  when: lp_timesyncd_debug2 | d(false) | bool
  tags: lp_timesyncd_service

# Notes on CentOS
# * systemd compiled without timesyncd service in CentOS 7 ?
# * use ntpd or chrony only ?
# https://unix.stackexchange.com/questions/286708/
# centos-7-2-minimal-time-synchronization-timedated-and-or-ntpd-chrony
# https://www.freedesktop.org/wiki/Software/systemd/timedated/

# EOF
...
