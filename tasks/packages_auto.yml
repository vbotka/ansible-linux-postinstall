---
# linux_postinstall packages_auto

- name: "packages_auto: Init variable local_pkg_lists"
  ansible.builtin.set_fact:
    local_pkg_lists: []
    local_pkg_list: []
  tags: lp_packages_auto

- name: "packages_auto: List variables ^lp_.*_packages$"
  ansible.builtin.set_fact:
    local_pkg_lists: "{{ local_pkg_lists + [{'install': install_var,
                                             'packages': item}] }}"
  loop: "{{ hostvars[inventory_hostname].keys()|
            select('regex', '^lp_.*_packages$')|
            list }}"
  vars:
    arr: "{{ item.split('_') }}"
    install_var: "{{ arr.0 + '_' + arr.1 + '_install' }}"
  tags: lp_packages_auto

- name: "packages_auto: Debug local_pkg_lists"
  ansible.builtin.debug:
    msg: "[{{ lookup('vars', item.install, default='false')|bool }}]
           {{ lookup('vars', item.packages)|join(',') }}"
  loop: "{{ local_pkg_lists }}"
  loop_control:
    label: "{{ label }}"
  when: lp_packages_debug|bool
  vars:
    label: "{{ item.install.split('_').1 }}"
  tags: lp_packages_auto

- name: "packages_auto: Create local_pkg_list"
  ansible.builtin.set_fact:
    local_pkg_list: "{{ local_pkg_list + lookup('vars', item.packages) }}"
  loop: "{{ local_pkg_lists }}"
  when: lookup('vars', item.install, default='False')|bool
  tags: lp_packages_auto

- name: "packages_auto: Debug local_pkg_list"
  ansible.builtin.debug:
    var: local_pkg_list
  when: lp_packages_debug|bool
  tags: lp_packages_auto

- name: "packages_auto: Install packages"
  ansible.builtin.include_tasks: fn/install-package.yml
  loop: "{{ local_pkg_list }}"
  tags: lp_packages_auto

# EOF
...
