---
# linux_postinstall packages_auto

- name: "packages_auto: Init variable local_pkg_lists"
  ansible.builtin.set_fact:
    local_pkg_lists: []
    local_pkg_list_all: []
    local_pkg_list: []
  tags: lp_packages_auto

- name: "packages_auto: List variables ^lp_.*_packages$"
  ansible.builtin.set_fact:
    local_pkg_lists: "{{ local_pkg_lists + [{'install': install_var,
                                             'packages': item}] }}"
  loop: "{{ query('ansible.builtin.varnames', '^lp_.*_packages$')|sort }}"
  vars:
    arr: "{{ item.split('_') }}"
    install_var: "{{ arr.0 + '_' + arr.1 + '_install' }}"
  tags: lp_packages_auto

- name: "packages_auto: Debug local_pkg_lists"
  ansible.builtin.debug:
    msg: "[{{ install }}] {{ pkgs }}"
  loop: "{{ local_pkg_lists }}"
  loop_control:
    label: "{{ label }}"
  vars:
    label: "{{ item.install.split('_').1 }}"
    install: "{{ lookup('vars', item.install, default='false')|bool }}"
    pkgl: "{{ lookup('vars', item.packages) }}"
    pkgs: "{{ ( pkgl|length > 0)|ternary(pkgl|join(','), 'none') }}"
  when: lp_packages_debug|bool
  tags: lp_packages_auto

- name: "packages_auto: Create local_pkg_list"
  block:
    - ansible.builtin.set_fact:
        local_pkg_list_all: "{{ local_pkg_list_all + lookup('vars', item.packages) }}"
      loop: "{{ local_pkg_lists }}"
      when: lookup('vars', item.install, default=False)|bool
    - ansible.builtin.set_fact:
        local_pkg_list: "{{ local_pkg_list_all|unique|sort }}"
  tags: lp_packages_auto

- name: "packages_auto: Debug local_pkg_list"
  ansible.builtin.debug:
    var: local_pkg_list
  when: lp_packages_debug|bool
  tags: lp_packages_auto

- name: "packages_auto: Install packages"
  ansible.builtin.package:
    name: "{{ local_pkg_list }}"
  register: result
  retries: "{{ lp_install_retries }}"
  until: result is succeeded
  delay: "{{ lp_install_delay }}"
  when: not lp_package_install_dryrun|bool
  tags: lp_packages_auto

# EOF
...
