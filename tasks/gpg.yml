---
# linux_postinstall gpg

- name: "Gpg: Debug lp_gpg_debug={{ lp_gpg_debug }}"
  when: lp_gpg_debug | bool
  tags: lp_gpg_debug
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      ansible_python_version: {{ ansible_python_version }}
      lp_gpg_install: {{ lp_gpg_install }}
      lp_gpg_packages:
        {{ lp_gpg_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_gpg_packages_extra:
        {{ lp_gpg_packages_extra | to_nice_yaml(indent=2) | indent(2) }}
      lp_gpg_conf_template: {{ lp_gpg_conf_template }}
      lp_gpg_conf:
        {{ lp_gpg_conf | to_yaml(indent=2) | indent(2) }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Gpg: Install packages"
  when: lp_gpg_install | bool
  tags: lp_gpg_packages
  vars:
    ll_ipkg_list: "{{ lp_gpg_packages + lp_gpg_packages_extra }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_gpg_debug | bool }}"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml

- name: "Gpg: Create directories .gnupg"
  tags: lp_gpg_dir
  ansible.builtin.file:
    state: directory
    dest: /home/{{ item }}/.gnupg
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: "0700"
  loop: "{{ lp_gpg_conf | map(attribute='owner') | unique | sort }}"

- name: "Gpg: Configure gnupg"
  tags: lp_gpg_conf
  register: lp_gpg_conf_reg
  notify: gpgconf reload
  ansible.builtin.template:
    src: "{{ lp_gpg_conf_template }}"
    dest: "{{ ['/home/', item.owner, '/.gnupg/', item.component, '.conf'] | join }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "0600"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_gpg_conf }}"
  loop_control:
    label: "{{ item.owner }} {{ item.component }}"

# TODO: import keys, template blocks

# EOF
