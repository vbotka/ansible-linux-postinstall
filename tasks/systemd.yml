---
# linux_postinstall systemd

- name: Set my_services
  tags:
    - lp_systemd_debug
    - lp_systemd_packages
    - lp_systemd_conf
  block:

    - name: "Systemd: Create empty dictionary my_services"
      ansible.builtin.set_fact:
        my_services: {}

    - name: "Systemd: Set my_services"
      vars:
        my_name: "{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"
        my_state: "{{ item.control.state | d('started') }}"
        my_restart_or_reload: "{{ item.control.restart_or_reload | d('reloaded') }}"
      ansible.builtin.set_fact:
        my_services: "{{ my_services |
                         combine({my_name: {'state': my_state,
                                            'restart_or_reload': my_restart_or_reload}}) }}"
      loop: "{{ lp_systemd_unit }}"
      loop_control:
        label: "{{ my_name }}"

- name: "Systemd: Debug lp_systemd_debug={{ lp_systemd_debug }}"
  when: lp_systemd_debug | bool
  tags: lp_systemd_debug
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      lp_systemd_install: {{ lp_systemd_install }}
      lp_systemd_packages:
        {{ lp_systemd_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_systemd_dir: {{ lp_systemd_dir }}
      lp_systemd_owner: {{ lp_systemd_owner }}
      lp_systemd_group: {{ lp_systemd_group }}
      lp_systemd_mode: {{ lp_systemd_mode }}
      lp_systemd_conf_no_extra_spaces: {{ lp_systemd_conf_no_extra_spaces }}
      lp_systemd_conf:
        {{ lp_systemd_conf | to_yaml(indent=2) | indent(2) }}
      lp_systemd_unit_dir: {{ lp_systemd_unit_dir }}
      lp_systemd_unit_type: {{ lp_systemd_unit_type }}
      lp_systemd_unit:
        {{ lp_systemd_unit | to_nice_yaml(indent=2) | indent(2) }}
      my_services:
        {{ my_services | to_yaml(indent=2) | indent(2) }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Systemd: Install packages"
  when: lp_systemd_install | bool
  tags: lp_systemd_packages
  vars:
    ll_ipkg_list: "{{ lp_systemd_packages }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_systemd_debug | bool }}"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml

- name: Configure systemd
  tags: lp_systemd_conf
  block:

    - name: "Systemd: Configure systemd"
      notify: reload systemd conf
      community.general.ini_file:
        path: "{{ item.0.key }}"
        section: "{{ item.1.section }}"
        option: "{{ item.1.key }}"
        value: "{{ item.1.val }}"
        owner: "{{ item.0.value.owner | d(lp_systemd_owner) }}"
        group: "{{ item.0.value.group | d(lp_systemd_group) }}"
        mode: "{{ item.0.value.mode | d(lp_systemd_mode) }}"
        no_extra_spaces: "{{ lp_systemd_conf_no_extra_spaces }}"
        backup: "{{ lp_backup_conf }}"
      register: lp_systemd_conf_changes
      loop: "{{ lp_systemd_conf | dict2items | subelements('value.conf') }}"
      loop_control:
        label: "{{ item.0.key }} {{ item.1.section }} {{ item.1.key }} {{ item.1.val }}"

    - name: "Systemd: Debug conf results lp_systemd_debug={{ lp_systemd_debug }}"
      when: lp_systemd_debug | bool
      ansible.builtin.debug:
        msg: "{{ lp_systemd_conf_changes.results }}"

    - name: "Systemd: Debug loop conf results lp_systemd_debug={{ lp_systemd_debug }}"
      when: lp_systemd_debug | bool
      vars:
        my_service: "{{ item.item.0.value.reload_service }}"
        my_state: "{{ my_services[my_service].state | d('started') }}"
        my_restart_or_reload: "{{ my_services[my_service].restart_or_reload | d('reloaded') }}"
      ansible.builtin.debug:
        msg: "{{ my_service }} {{ my_state }} {{ my_restart_or_reload }}"
      loop: "{{ lp_systemd_conf_changes.results | d([]) }}"
      loop_control:
        label: "{{ item.path | d('NA') }}" # 'lp_systemd: false' complains "no attribute 'path'"

- name: Create units
  tags: lp_systemd_unit_create
  block:

    - name: "Systemd: Create units"
      when: item.state | d('noop') == 'create'
      notify: reload systemd units
      ansible.builtin.template:
        src: systemd-unit.j2
        dest: "{{ item.path | d(lp_systemd_unit_dir) }}/{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"
        owner: "{{ item.owner | d(lp_systemd_owner) }}"
        group: "{{ item.group | d(lp_systemd_group) }}"
        mode: "{{ item.mode | d(lp_systemd_mode) }}"
        backup: "{{ lp_backup_conf }}"
      register: lp_systemd_unit_create_changes
      loop: "{{ lp_systemd_unit }}"
      loop_control:
        label: "{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"

    - name: "Systemd: Debug unit create results lp_systemd_debug={{ lp_systemd_debug }}"
      when: lp_systemd_debug | bool
      ansible.builtin.debug:
        var: lp_systemd_unit_create_changes

- name: Remove units
  tags: lp_systemd_unit_remove
  block:

    - name: "Systemd: Remove units"
      when: item.state | d('noop') == 'absent'
      ansible.builtin.file:
        state: absent
        path: "{{ item.path | d(lp_systemd_unit_dir) }}/{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"
      register: lp_systemd_unit_remove_changes
      loop: "{{ lp_systemd_unit }}"
      loop_control:
        label: "{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"

    - name: "Systemd: Debug unit remove results lp_systemd_debug={{ lp_systemd_debug }}"
      when: lp_systemd_debug | bool
      ansible.builtin.debug:
        var: lp_systemd_unit_remove_changes

- name: Control units
  tags: lp_systemd_unit_control
  block:

    - name: "Systemd: Control units"
      when:
        - item.control | d([]) | length > 0
        - not (item.name | regex_search('^(.*)@\.\w+$'))
      ansible.builtin.systemd:
        name: "{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"
        daemon_reexec: "{{ item.control.daemon_reexec | d(omit) }}"
        daemon_reload: "{{ item.control.daemon_reload | d(omit) }}"
        enabled: "{{ item.control.enabled | d(omit) }}"
        force: "{{ item.control.force | d(omit) }}"
        masked: "{{ item.control.masked | d(omit) }}"
        no_block: "{{ item.control.no_block | d(omit) }}"
        scope: "{{ item.control.scope | d(omit) }}"
        state: "{{ item.control.state | d(omit) }}"
      register: lp_systemd_unit_control_changes
      loop: "{{ lp_systemd_unit }}"
      loop_control:
        label: "{{ item.name }}.{{ item.type | d(lp_systemd_unit_type) }}"

    - name: "Systemd: Debug unit control results lp_systemd_debug={{ lp_systemd_debug }}"
      when: lp_systemd_debug | bool
      ansible.builtin.debug:
        var: lp_systemd_unit_control_changes

# EOF
