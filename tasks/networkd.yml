---
# linux_postinstall networkd

- name: "networkd: Debug"
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      lp_networkd_install: {{ lp_networkd_install }}
      lp_networkd_packages:
        {{ lp_networkd_packages|to_nice_yaml(indent=2)|indent(2) }}
      lp_networkd_enable: {{ lp_networkd_enable }}
      lp_networkd_service: {{ lp_networkd_service }}
      lp_networkd_conf:
        {{ lp_networkd_conf|to_yaml(indent=2)|indent(2) }}
      lp_systemd_owner: {{ lp_systemd_owner }}
      lp_systemd_group: {{ lp_systemd_group }}
      lp_systemd_mode: {{ lp_systemd_mode }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_networkd_debug|bool
  tags: lp_networkd_debug

# Packages
- name: "networkd: Install packages"
  ansible.builtin.include_tasks:
    file: fn/install-package.yml
    apply:
      tags: lp_networkd_packages
  loop: "{{ lp_networkd_packages }}"
  when: lp_networkd_install|bool
  tags: lp_networkd_packages

# Conf
- name: "networkd: Configure networkd"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner|default(lp_systemd_owner) }}"
    group: "{{ item.group|default(lp_systemd_group) }}"
    mode: "{{ item.mode|default(lp_systemd_mode) }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_networkd_conf }}"
  loop_control:
    label: "{{ item.dest }}"
  notify: restart networkd
  tags: lp_networkd_conf

# Service
- name: "networkd: Service {{ state }} and {{ enable }}"
  ansible.builtin.service:
    name: "{{ lp_networkd_service }}"
    state: "{{ state }}"
    enabled: "{{ enabled }}"
  register: result
  vars:
    enabled: "{{ lp_networkd_enable|bool|d(false) }}"
    state: "{{ lp_networkd_state|d(default_state) }}"
    default_state: "{{ enabled|ternary('started', 'stopped') }}"
    enable: "{{ enabled|ternary('enabled', 'disabled') }}"
  tags: lp_networkd_service

- name: "networkd: Debug service"
  ansible.builtin.debug:
    var: result
  when: lp_networkd_debug|bool

# EOF
...
