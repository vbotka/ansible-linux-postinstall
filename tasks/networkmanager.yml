---
# linux_postinstall networkmanager

- name: "nm: Debug"
  vars:
    msg: |-
      lp_nm_install: {{ lp_nm_install }}
      lp_nm_packages:
        {{ lp_nm_packages|to_nice_yaml|indent(2) }}
      lp_nm_enable: {{ lp_nm_enable }}
      lp_nm_override: {{ lp_nm_override }}
      lp_nm_conf_path: {{ lp_nm_conf_path }}
      lp_nm_conf_no_extra_spaces: {{ lp_nm_conf_no_extra_spaces }}
      lp_nm_conf:
        {{ lp_nm_conf|to_yaml|indent(2) }}
      lp_nm_services:
        {{ lp_nm_services|to_nice_yaml|indent(2) }}
      lp_nm_mask: {{ lp_nm_mask }}
      lp_nm_service_mask:
        {{ lp_nm_services_mask|to_nice_yaml|indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_nm_debug|bool
  tags: lp_nm_debug

# Packages
- name: "nm: Install packages"
  ansible.builtin.include_tasks: fn/install-package.yml
  loop: "{{ lp_nm_packages }}"
  when: lp_nm_install|bool
  tags: lp_nm_packages

# Override
- name: "nm: Create /etc/init/network-manager.override"
  ansible.builtin.template:
    src: network-manager-override.j2
    dest: /etc/init/network-manager.override
    owner: root
    group: root
    mode: "0644"
  when: not lp_nm_enable|bool
  tags: lp_nm_override

- name: "nm: Remove /etc/init/network-manager.override"
  ansible.builtin.file:
    state: absent
    dest: /etc/init/network-manager.override
  when: lp_nm_enable|bool
  tags: lp_nm_override

# Conf
- name: "nm: Configure {{ lp_nm_conf_path }}"
  community.general.ini_file:
    path: "{{ lp_nm_conf_path }}"
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.val }}"
    no_extra_spaces: "{{ lp_nm_conf_no_extra_spaces }}"
    backup: "{{ lp_backup_conf }}"
    mode: "0644"
  loop: "{{ lp_nm_conf }}"
  tags: lp_nm_conf

# Service
- name: "nm: Start and enable NM services"
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop: "{{ lp_nm_services }}"
  when: lp_nm_enable|bool
  tags: lp_nm_start

- name: "nm: Stop and disable NM services"
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop: "{{ lp_nm_services }}"
  when: not lp_nm_enable|bool
  tags: lp_nm_stop

# Mask service
- name: "nm: Unmask NM services"
  ansible.builtin.command:
    cmd: >
      systemctl unmask {{ item }}
    warn: false
  loop: "{{ lp_nm_services_mask }}"
  changed_when: false
  when: not lp_nm_mask|bool
  tags: lp_nm_mask

- name: "nm: Mask NM services"
  ansible.builtin.command:
    cmd: >
      systemctl mask {{ item }}
    warn: false
  loop: "{{ lp_nm_services_mask }}"
  changed_when: false
  when: lp_nm_mask|bool
  tags: lp_nm_mask

# EOF
...
