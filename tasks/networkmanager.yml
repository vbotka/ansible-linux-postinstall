---
# linux_postinstall networkmanager

- name: "Nm: Debug lp_nm_debug={{ lp_nm_debug }}"
  when: lp_nm_debug | bool
  tags: lp_nm_debug
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      ansible_distribution: {{ ansible_distribution }}
      ansible_distribution_version: {{ ansible_distribution_version }}
      ansible_distribution_release: {{ ansible_distribution_release }}

      lp_backup_conf: {{ lp_backup_conf }}

      lp_nm_install: {{ lp_nm_install }}
      lp_nm_packages:
        {{ lp_nm_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_nm_enable: {{ lp_nm_enable }}
      lp_nm_override: {{ lp_nm_override }}
      lp_nm_conf_path: {{ lp_nm_conf_path }}
      lp_nm_conf_no_extra_spaces: {{ lp_nm_conf_no_extra_spaces }}
      lp_nm_conf:
        {{ lp_nm_conf | to_yaml(indent=2) | indent(2) }}
      lp_nm_services:
        {{ lp_nm_services | to_nice_yaml(indent=2) | indent(2) }}
      lp_nm_mask: {{ lp_nm_mask }}
      lp_nm_service_mask:
        {{ lp_nm_services_mask | to_nice_yaml(indent=2) | indent(2) }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Nm: Install packages"
  when: lp_nm_install | bool
  tags: lp_nm_packages
  vars:
    ll_ipkg_list: "{{ lp_nm_packages }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_nm_debug | bool }}"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml

- name: Override
  tags: lp_nm_override
  block:

    - name: "Nm: Create /etc/init/network-manager.override"
      when: not lp_nm_enable | bool
      ansible.builtin.template:
        src: network-manager-override.j2
        dest: /etc/init/network-manager.override
        owner: root
        group: root
        mode: "0644"

    - name: "Nm: Remove /etc/init/network-manager.override"
      when: lp_nm_enable | bool
      ansible.builtin.file:
        state: absent
        dest: /etc/init/network-manager.override

- name: "Nm: Configure {{ lp_nm_conf_path }}"
  tags: lp_nm_conf
  community.general.ini_file:
    path: "{{ lp_nm_conf_path }}"
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.val }}"
    no_extra_spaces: "{{ lp_nm_conf_no_extra_spaces }}"
    backup: "{{ lp_backup_conf }}"
    mode: "0644"
  loop: "{{ lp_nm_conf }}"

- name: "Nm: Services start/stop and enable/disable"
  tags: lp_nm_service
  vars:
    srv_name: "{{ lookup('vars', 'lp_' ~ item ~ '_service', default=item) }}"
    srv_enbl: "{{ lookup('vars', 'lp_' ~ item ~ '_enable', default=false) }}"
    srv_stat: "{{ lookup('vars', 'lp_' ~ item ~ '_state', default=default_stat) }}"
    default_stat: "{{ srv_enbl | bool | ternary('started', 'stopped') }}"
  ansible.builtin.service:
    name: "{{ srv_name }}"
    state: "{{ srv_stat }}"
    enabled: "{{ srv_enbl }}"
  loop: "{{ lp_nm_services }}"
  loop_control:
    label: "{{ srv_name }} state: {{ srv_stat }} enabled: {{ srv_enbl }}"

- name: "Nm: Services mask={{ lp_nm_mask }}"
  tags: lp_nm_mask
  vars:
    srv_name: "{{ lookup('vars', 'lp_' ~ item ~ '_service', default=item) }}"
  ansible.builtin.systemd_service:
    name: "{{ srv_name }}"
    masked: "{{ lp_nm_mask }}"
  loop: "{{ lp_nm_services_mask }}"
  loop_control:
    label: "{{ srv_name }}"

# EOF
