---
# linux_postinstall zfs

- name: "Zfs: Debug lp_zfs_debug={{ lp_zfs_debug }}"
  when: lp_zfs_debug | bool
  tags: lp_zfs_debug
  vars:
    msg: |-
      lp_zfs_install: {{ lp_zfs_install }}
      lp_zfs_packages:
        {{ lp_zfs_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_zfs_services:
        {{ lp_zfs_services | d([]) | to_yaml(indent=2) | indent(2) }}
      lp_zfs_manage:
        {{ lp_zfs_manage | to_yaml(indent=2) | indent(2) }}
      lp_zfs_mountpoints:
        {{ lp_zfs_mountpoints | to_yaml(indent=2) | indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Zfs: Install packages"
  when: lp_zfs_install | bool
  tags: lp_zfs_packages
  vars:
    ll_ipkg_list: "{{ lp_zfs_packages }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_zfs_debug | bool }}"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml

- name: "Zfs: Manage zfs services"
  tags: lp_zfs_services
  vars:
    srv_enbl: "{{ item.enabled | d(true) }}"
    srv_stat: "{{ item.state | d(default_stat) }}"
    default_stat: "{{ srv_enbl | bool | ternary('started', 'stopped') }}"
  ansible.builtin.service:
    name: "{{ item.name }}"
    enabled: "{{ srv_enbl }}"
    state: "{{ srv_stat }}"
  loop: "{{ lp_zfs_services | d([]) }}"
  loop_control:
    label: "{{ item.name }} enabled: {{ srv_enbl }} state: {{ srv_stat }}"

- name: "Zfs: Manage zfs"
  tags: lp_zfs_manage
  community.general.zfs:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    origin: "{{ item.origin | d(omit) }}"
    extra_zfs_properties: "{{ item.extra_zfs_properties | d(omit) }}"
  loop: "{{ lp_zfs_manage }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Zfs: Set mode and ownership of zfs mountpoints"
  tags: lp_zfs_mountpoints
  ansible.builtin.file:
    state: directory
    path: "{{ item.mountpoint }}"
    owner: "{{ item.owner | d(omit) }}"
    group: "{{ item.group | d(omit) }}"
    mode: "{{ item.mode | d(omit) }}"
  loop: "{{ lp_zfs_mountpoints }}"
  loop_control:
    label: "{{ item.mountpoint }}"

# EOF
