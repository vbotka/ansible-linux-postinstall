---
# linux-postinstall ufw

#   Notes
#
# 1.Aliases of parameters in ufw module not implemented in task
#   "Configure ufw".
# 2.It's not necessary to reload ufs after configuration has
#   changed. Module ufw automatically updates the rules.
# 3.Best practice: First time 'lp_ufw_reset: true'; configure and enable
#   ufs (configuration item {state: 'enabled'} reloads firewall and
#   enables firewall on boot); 'lp_ufw_enable: true' start and enable ufw
#   service.
# 4.Configuration on the fly: configure and enable ufs.
# 5.The last configuration item should be {state: 'enabled'}.
# 6.ufw is not starting on boot despite ENABLED=yes in /etc/ufw/ufw.conf
#   See: How do I get ufw to start on boot?
#   https://askubuntu.com/questions/1040539/how-do-i-get-ufw-to-start-on-boot
# 7.See: man ufw.

- name: "ufw: Debug"
  vars:
    msg: |
      lp_ufw_install [{{ lp_ufw_install }}]
      lp_ufw_enable [{{ lp_ufw_enable }}]
      lp_ufw_reset [{{ lp_ufw_reset }}]
      lp_ufw_reload [{{ lp_ufw_reload }}]
      lp_ufw_packages
      {{ lp_ufw_packages|to_nice_yaml }}
      lp_ufw_conf
      {{ lp_ufw_conf|to_yaml }}
      lp_ufw_service_conf
      {{ lp_ufw_service_conf|to_yaml }}
  debug:
    msg: "{{ msg.split('\n')[:-1] }}"
  when: lp_ufw_debug|bool
  tags: lp_ufw_debug

- name: "ufw: Install packages"
  include_tasks: fn/install-package.yml
  loop: "{{ lp_ufw_packages }}"
  when: lp_ufw_install|bool
  tags: lp_ufw_packages

- name: "ufw: Disable and reset firewall to installation defaults"
  ufw:
    state: reset
  when: lp_ufw_reset|bool
  tags: lp_ufw_reset

- name: "ufw: Reload firewall"
  ufw:
    state: reloaded
  when: lp_ufw_reload|bool
  tags: lp_ufw_reload

- name: "ufw: Configure ufw"
  ufw:
    comment: "{{ item.comment|default(omit) }}"
    default: "{{ item.default|default(omit) }}"
    delete: "{{ item.delete|default(omit) }}"
    direction: "{{ item.direction|default(omit) }}"
    from_ip: "{{ item.from_ip|default(omit) }}"
    from_port: "{{ item.from_port|default(omit) }}"
    insert: "{{ item.insert|default(omit) }}"
    insert_relative_to: "{{ item.insert_relative_to|default(omit) }}"
    interface: "{{ item.interface|default(omit) }}"
    log: "{{ item.log|default(omit) }}"
    logging: "{{ item.logging|default(omit) }}"
    name: "{{ item.name|default(omit) }}"
    proto: "{{ item.proto|default(omit) }}"
    route: "{{ item.route|default(omit) }}"
    rule: "{{ item.rule|default(omit) }}"
    state: "{{ item.state|default(omit) }}"
    to_ip: "{{ item.to_ip|default(omit) }}"
    to_port: "{{ item.to_port|default(omit) }}"
  loop: "{{ lp_ufw_conf }}"
  tags: lp_ufw_conf

- name: "ufw: Configure service"
  ini_file:
    path: "{{ item.0.path }}"
    owner: "{{ item.0.owner|default(omit) }}"
    group: "{{ item.0.group|default(omit) }}"
    mode: "{{ item.0.mode|default(omit) }}"
    create: "{{ item.0.create|default(omit) }}"
    no_extra_spaces: "{{ item.0.no_extra_spaces|default(omit) }}"
    section: "{{ item.1.section }}"
    state: "{{ item.1.state|default(omit) }}"
    option: "{{ item.1.option|default(omit) }}"
    value: "{{ item.1.value|default(omit) }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_ufw_service_conf|subelements('ini', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.path }}"
  notify: "{{ item.0.handlers|default(omit) }}"
  tags: lp_ufw_service_conf

- name: "ufw: Start and enable ufw"
  service:
    name: "{{ lp_ufw_service }}"
    state: started
    enabled: true
  register: result
  when: lp_ufw_enable|bool
  tags: lp_ufw_service

- name: "ufw: Debug enabled service"
  debug:
    var: result
  when:
    - lp_ufw_enable|bool
    - lp_ufw_debug|bool
  tags: lp_ufw_service

- name: "ufw: Stop and disable ufw"
  service:
    name: "{{ lp_ufw_service }}"
    state: stopped
    enabled: false
  register: result
  when: not lp_ufw_enable|bool
  tags: lp_ufw_service

- name: "ufw: Debug disabled service"
  debug:
    var: result
  when:
    - not lp_ufw_enable|bool
    - lp_ufw_debug|bool
  tags: lp_ufw_service

# EOF
...
