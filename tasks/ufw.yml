---
# linux_postinstall ufw

# Notes
#
# 1.Aliases of parameters in ufw module not implemented in task
#   "Configure ufw".
# 2.It's not necessary to reload ufw after configuration has
#   changed. Module ufw automatically updates the rules.
# 3.Best practice: First time 'lp_ufw_reset: true'; configure and enable
#   ufs (configuration item {state: 'enabled'} reloads firewall and
#   enables firewall on boot); 'lp_ufw_enable: true' start and enable ufw
#   service.
# 4.Configuration on the fly: configure and enable ufs.
# 5.The last configuration item should be {state: 'enabled'}.
# 6.ufw is not starting on boot despite ENABLED=yes in /etc/ufw/ufw.conf
#   See: How do I get ufw to start on boot?
#   https://askubuntu.com/questions/1040539/how-do-i-get-ufw-to-start-on-boot
# 7.See: man ufw.

- name: "Ufw: Debug"
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      lp_ufw_install: {{ lp_ufw_install }}
      lp_ufw_enable: {{ lp_ufw_enable }}
      lp_ufw_reset: {{ lp_ufw_reset }}
      lp_ufw_reload: {{ lp_ufw_reload }}
      lp_ufw_packages:
        {{ lp_ufw_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_ufw_default:
        {{ lp_ufw_default | to_yaml(indent=2) | indent(2) }}
      lp_ufw_sysctl:
        {{ lp_ufw_sysctl | to_yaml(indent=2) | indent(2) }}
      lp_ufw_blocks:
        {{ lp_ufw_blocks | to_nice_yaml(indent=2) | indent(2) }}
      lp_ufw_conf:
        {{ lp_ufw_conf | to_yaml(indent=2) | indent(2) }}
      lp_ufw_service_conf:
        {{ lp_ufw_service_conf | to_yaml(indent=2) | indent(2) }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: lp_ufw_debug|bool
  tags: lp_ufw_debug

- name: "Ufw: Install packages"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml
  when: lp_ufw_install|bool
  vars:
    ll_ipkg_list: "{{ lp_ufw_packages }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_ufw_debug | bool }}"
  tags: lp_ufw_packages

- name: "Ufw: Disable and reset firewall to installation defaults"
  community.general.ufw:
    state: reset
  when: lp_ufw_reset|bool
  tags: lp_ufw_reset

- name: "Ufw: Reload firewall"
  community.general.ufw:
    state: reloaded
  when: lp_ufw_reload|bool
  tags: lp_ufw_reload

- name: "Ufw: Configure /etc/default/ufw"
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: ^\s*{{ item.key }}\s*=(.*)$
    line: "{{ item.key }}={{ item.val }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_ufw_default }}"
  loop_control:
    label: "{{ item.key }}: {{ item.val }}"
  notify: reload ufw
  tags: lp_ufw_defaults

- name: "Ufw: Configure /etc/ufw/sysctl.conf"
  ansible.builtin.lineinfile:
    path: /etc/ufw/sysctl.conf
    regexp: ^\s*{{ item.key }}\s*=(.*)$
    line: "{{ item.key }}={{ item.val }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_ufw_sysctl }}"
  loop_control:
    label: "{{ item.key }}: {{ item.val }}"
  notify: reload ufw
  tags: lp_ufw_defaults

- name: "Ufw: Configure blocks"
  ansible.builtin.blockinfile:
    path: /etc/ufw/{{ item.0.key }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.1.mark }}"
    block: "{{ item.1.block }}"
    insertbefore: "{{ item.1.insertbefore|default(omit) }}"
    insertafter: "{{ item.1.insertafter|default(omit) }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_ufw_blocks|dict2items|subelements('value') }}"
  loop_control:
    label: "{{ item.0.key }} {{ item.1.mark }}"
  notify: reload ufw
  tags: lp_ufw_defaults

- name: "Ufw: Configure ufw"
  community.general.ufw:
    comment: "{{ item.comment | default(omit) }}"
    default: "{{ item.default | default(omit) }}"
    delete: "{{ item.delete | default(omit) }}"
    direction: "{{ item.direction | default(omit) }}"
    from_ip: "{{ item.from_ip | default(omit) }}"
    from_port: "{{ item.from_port | default(omit) }}"
    insert: "{{ item.insert | default(omit) }}"
    insert_relative_to: "{{ item.insert_relative_to | default(omit) }}"
    interface: "{{ item.interface | default(omit) }}"
    log: "{{ item.log | default(omit) }}"
    logging: "{{ item.logging | default(omit) }}"
    name: "{{ item.name | default(omit) }}"
    proto: "{{ item.proto | default(omit) }}"
    route: "{{ item.route | default(omit) }}"
    rule: "{{ item.rule | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    to_ip: "{{ item.to_ip | default(omit) }}"
    to_port: "{{ item.to_port | default(omit) }}"
  loop: "{{ lp_ufw_conf }}"
  loop_control:
    label: "{{ item.comment | default('no comment') }}"
  tags: lp_ufw_conf

- name: "Ufw: Configure service"
  community.general.ini_file:
    path: "{{ item.0.path }}"
    owner: "{{ item.0.owner|default(omit) }}"
    group: "{{ item.0.group|default(omit) }}"
    mode: "{{ item.0.mode|default(omit) }}"
    create: "{{ item.0.create|default(omit) }}"
    no_extra_spaces: "{{ item.0.no_extra_spaces|default(omit) }}"
    section: "{{ item.1.section }}"
    state: "{{ item.1.state|default(omit) }}"
    option: "{{ item.1.option|default(omit) }}"
    value: "{{ item.1.value|default(omit) }}"
    backup: "{{ lp_backup_conf }}"
  loop: "{{ lp_ufw_service_conf|subelements('ini', {'skip_missing': True}) }}"
  loop_control:
    label: "{{ item.0.path }} {{ item.1.section|default('none') }} {{ item.1.option|default('none') }} {{ item.1.value|default('none') }} {{ item.1.state|default('none')
      }}"
  notify: "{{ item.0.handlers|default(omit) }}"
  tags: lp_ufw_service_conf

- name: "Ufw: Service {{ state }} and {{ enable }}"
  ansible.builtin.service:
    name: "{{ lp_ufw_service }}"
    state: "{{ state }}"
    enabled: "{{ enabled }}"
  register: result
  vars:
    enabled: "{{ lp_ufw_enable | bool | d(false) }}"
    state: "{{ lp_ufw_state | d(default_state) }}"
    default_state: "{{ enabled | ternary('started', 'stopped') }}"
    enable: "{{ enabled | ternary('enabled', 'disabled') }}"
  tags: lp_ufw_service

- name: "Ufw: Debug service"
  ansible.builtin.debug:
    var: result
  when: lp_ufw_debug|bool
  tags: lp_ufw_service

# EOF
