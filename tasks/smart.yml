---
# linux_postinstall smart

- name: "Smart: Debug lp_smart_debug={{ lp_smart_debug }}"
  when: lp_smart_debug | bool
  tags: lp_smart_debug
  vars:
    msg: |-
      ansible_os_family: {{ ansible_os_family }}
      lp_smart_install: {{ lp_smart_install }}
      lp_smart_packages:
        {{ lp_smart_packages | to_nice_yaml(indent=2) | indent(2) }}
      lp_backup_conf: {{ lp_backup_conf }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Smart: Install packages"
  when: lp_smart_install | bool
  tags: lp_smart_packages
  vars:
    ll_ipkg_list: "{{ lp_smart_packages }}"
    ll_ipkg_state: "{{ lp_package_state }}"
    ll_ipkg_autoremove: "{{ lp_packages_autoremove | bool }}"
    ll_ipkg_rescue_end_host: "{{ lp_packages_rescue_end_host | bool }}"
    ll_debug: "{{ lp_smart_debug | bool }}"
  ansible.builtin.import_role:
    name: vbotka.linux_lib
    tasks_from: install_package.yml

- name: Configure lp_smart_conf_file
  tags: lp_smart_conf
  notify: reload smart
  block:

    - name: "Smart: Do not scan for devices. Configure {{ lp_smart_conf_file }}"
      when: not lp_smart_devicescan | bool
      ansible.builtin.lineinfile:
        state: absent
        dest: "{{ lp_smart_conf_file }}"
        regexp: ^\s*DEVICESCAN\s*(.*)$
        owner: "{{ lp_smart_conf_owner }}"
        group: "{{ lp_smart_conf_group }}"
        mode: "{{ lp_smart_conf_mode }}"
        backup: "{{ lp_backup_conf }}"
        create: true

    - name: "Smart: Configure devices in {{ lp_smart_conf_file }}"
      ansible.builtin.lineinfile:
        dest: "{{ lp_smart_conf_file }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        owner: "{{ lp_smart_conf_owner }}"
        group: "{{ lp_smart_conf_group }}"
        mode: "{{ lp_smart_conf_mode }}"
        backup: "{{ lp_backup_conf }}"
        create: true
      loop: "{{ lp_smart_devices }}"
      loop_control:
        label: "{{ item.line }}"

- name: Service
  tags: lp_smart_service
  block:

    - name: "Smart: Service {{ state ~ ' and ' ~ enable }}"
      vars:
        enabled: "{{ lp_smart_enable | bool | d(false) }}"
        state: "{{ lp_smart_state | d(default_state) }}"
        default_state: "{{ enabled | ternary('started', 'stopped') }}"
        enable: "{{ enabled | ternary('enabled', 'disabled') }}"
      register: result
      ansible.builtin.service:
        name: "{{ lp_smart_service }}"
        state: "{{ state }}"
        enabled: "{{ enabled }}"

    - name: "Smart: Debug service lp_smart_debug={{ lp_smart_debug }}"
      when: lp_smart_debug | bool
      ansible.builtin.debug:
        var: result

# EOF
