---
# linux_postinstall smart

- name: "smart: Install packages"
  ansible.builtin.include_tasks: fn/install-package.yml
  loop: "{{ lp_smart_packages }}"
  tags: lp_smart_packages

- name: "smart: Configure {{ lp_smart_conf_file }}. Do not scan for devices"
  ansible.builtin.lineinfile:
    state: absent
    dest: "{{ lp_smart_conf_file }}"
    regexp: '^\s*DEVICESCAN\s*(.*)$'
    owner: "{{ lp_smart_conf_owner }}"
    group: "{{ lp_smart_conf_group }}"
    mode: "{{ lp_smart_conf_mode }}"
    backup: "{{ lp_backup_conf }}"
    create: true
  when: not lp_smart_devicescan|bool
  notify: reload smart
  tags: lp_smart_conf

- name: "smart: Configure devices in {{ lp_smart_conf_file }}"
  ansible.builtin.lineinfile:
    dest: "{{ lp_smart_conf_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    owner: "{{ lp_smart_conf_owner }}"
    group: "{{ lp_smart_conf_group }}"
    mode: "{{ lp_smart_conf_mode }}"
    backup: "{{ lp_backup_conf }}"
    create: true
  loop: "{{ lp_smart_devices }}"
  notify: reload smart
  tags: lp_smart_conf

- name: "smart: Start and enable smart"
  ansible.builtin.service:
    name: "{{ lp_smart_service }}"
    state: started
    enabled: true
  register: result
  when: lp_smart_enable|bool
  tags: lp_smart_service

- name: "smart: Debug service"
  ansible.builtin.debug:
    var: result
  when: lp_smart_debug|bool

- name: "smart: Stop and disable smart"
  ansible.builtin.service:
    name: "{{ lp_smart_service }}"
    state: stopped
    enabled: false
  register: result
  when: not lp_smart_enable|bool
  tags: lp_smart_service

- name: "smart: Debug service"
  ansible.builtin.debug:
    var: result
  when: lp_smart_debug|bool

# EOF
...
