---
# Variables in var/main.yml override variables in defaults/*
#
# linux-postinstall vars

# linux-postinstall repos
# lp_repos:
#  - repo: 'deb http://archive.canonical.com/ubuntu artful partner'
#  - repo: 'deb http://packages.cloud.google.com/apt cloud-sdk-artful main'
#  - repo: 'deb http://ppa.launchpad.net/ansible/ansible-2.4/ubuntu artful main'
# lp_repos_keys:
#  - url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
#  - keyserver: 'keyserver.ubuntu.com'
#    id: '6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367'
#
# Notes on issues still open 08/2019)
# 1) apt_repository: does not understand arch= option #18975 (reported Dec 8, 2016)
# https://github.com/ansible/ansible/issues/18975
# 2) apt-repository drops the arch specification given in the source string of the repo parameter #23690
# https://github.com/ansible/ansible/issues/23690

# linux-postinstall packages
# lp_packages_selections_preinstall:
#  - {name: ca-certificates, selection: hold}
# lp_packages_autoremove: true
# lp_packages_install:
#  - ansible
#  - google-cloud-sdk
# lp_packages_remove:
#  - aptdaemon
#  - aptdaemon-data

# linux-postinstall modules
# lp_modules:
#  - {name: br_netfilter, params: ''}
#  - {name: vboxdrv, params: '', state: absent}
# lp_modules_options:
#     - module: btusb
#       options:
#         - 'options btusb enable_autosuspend=0'

# linux-postinstall sysctl
# https://help.ubuntu.com/community/Xen
# http://askubuntu.com/questions/243499/how-do-i-set-up-a-xen-bridge
# lp_sysctl_vars:
#  - {var: net.bridge.bridge-nf-call-ip6tables, value: '1' }
#  - {var: net.bridge.bridge-nf-call-iptables, value: '1' }
#  - {var: net.bridge.bridge-nf-call-arptables, value: '1' }
#  - {var: net.ipv4.ip_forward, value: '1' }
#  - {var: net.ipv4.conf.eth0.proxy_arp, value: '1' }

# linux-postinstall udev
# lp_udev_conf:
#   - {key: udev_log, val: debug}

# lp_udev_rules_template: udev-rules.j2
# lp_udev_rules:
#   70-persistent-net.rules:
#     - - {key: 'NAME', value: "eth0", operator: '=='}
#       - {key: 'SUBSYSTEM', value: 'net', operator: '=='}
#       - {key: 'ACTION', value: 'add', operator: '=='}
#       - {key: 'DRIVERS', value: '?*', operator: '=='}
#       - {key: 'ATTR{address}', value: '80:3f:5d:14:b1:d3', operator: '=='}
#       - {key: 'ATTR{type}', value: '1', operator: '=='}
# lp_udev_hci_name_rules:
#  - {product: "Broadcom Bluetooth Device", name: "hci0"}
#  - {product: "CSR8510 A10", name: "hci1"}
# For MAC of BT devices "phys" is used instead of "address".
# There is no phys/address of the controller available in udev
#  - {mac: "<MAC-ADDRESS>", name: "hci0"}
#  - {mac: "<MAC-ADDRESS>", name: "hci1"}
# lp_udev_hci_run_rules:
#  - {product: "Broadcom Bluetooth Device",
#     run: "/bin/hciconfig hci0 up auth encrypt"}
#  - {product: "CSR8510 A10",
#     run: "/bin/hciconfig hci1 up auth encrypt"}

# lp_users:
#  - {name: admin,
#     shell: /bin/bash,
#     password: "",
#     update_password: on_create}
# SEE: How do I generate crypted passwords for the user module?
# http://docs.ansible.com/ansible/
#        faq.html#how-do-i-generate-crypted-passwords-for-the-user-module
# example: mkpasswd --method=SHA-512 PASSWORD -s SALT
# SALT can be created with: pwgen -s 16 1
#
# lp_users_groups:
#  - {name: admin, groups: adm}
# groups must not comprise primary group

# lp_aliases:
# - {alias: root, users: [admin, user1]}
# - {alias: admin, users: [user1]}

# Copy authorized keys
# lp_authorized_keys:
#  - {user: "admin",
#     key: "{{ lookup('file',
#     '~/.ansible/copy/ssh-pub-keys/admin/id_rsa.pub') }}" }

# Configure /etc/hostname
# lp_hostname: host
# lp_fqdn: host.example.com
# lp_fqdn_ip: 127.0.1.1

# Configure /etc/hosts
# lp_hosts_template: hosts-aliases-list.j2
# lp_hosts:
#  - {ip: 10.1.0.10, fqdn: srv.example.com, hostname: srv}

# lp_grub_default:
#  - {var: GRUB_SAVEDEFAULT, value: "false"}
#  - {var: GRUB_DEFAULT, value: "0"}
#  - {var: GRUB_TIMEOUT, value: "10"}
#  - {var: GRUB_HIDDEN_TIMEOUT, value: "0"}
#  - {var: GRUB_HIDDEN_TIMEOUT_QUIET, value: "true"}
#  - {var: GRUB_DISTRIBUTOR,
#            value: "`lsb_release -i -s 2> /dev/null || echo Debian`"}
#  - {var: GRUB_CMDLINE_LINUX_DEFAULT, value: '"quiet splash"'}
#  - {var: GRUB_CMDLINE_LINUX, value: '""'}

# Configure XEN
# lp_xen: true
# lp_xen_version: "4.9"
# lp_xen_dom0_mem: "4096M"
# lp_xen_dom0_mem_max: "4096M"
# lp_xen_global:
#  - {var: "autoballoon", value: "\"0\""}

# LaTeX
# lp_latex: true
# lp_latex_macros:
#  - {url: "http://mirrors.ctan.org/macros/latex/contrib/labels/labels.ins",
#     dest: "/usr/share/texmf/tex/latex/labels"}
#  - {url: "http://mirrors.ctan.org/macros/latex/contrib/labels/labels.dtx",
#     dest: "/usr/share/texmf/tex/latex/labels"}

# Configure /etc/pm
# lp_pm: true
# lp_pm_sleepd:
#  55_bluetooth:
#    file: "55_bluetooth"
#    path: "/sbin:/usr/sbin:/bin:/usr/bin"
#    suspend_hibernate:
#      - 'service bluetooth stop'
#      - 'hciconfig hci0 down'
#    resume_thaw:
#      - 'hciconfig hci0 reset'
#      - 'service bluetooth restart'
#      - 'hciconfig hci0 up'
#      - 'hciconfig hci0 auth'
#      - 'hciconfig hci0 encrypt'

# Configure /etc/ssh/sshd_config
# lp_sshd: true
# lp_sshd_pubkeyauthentication: "yes"
# lp_sshd_passwordauthentication: "no"
# lp_sshd_challengeresponseauthentication: "no"
# lp_sshd_permitrootlogin: "no"
# lp_sshd_permittunnel: "no"
# lp_sshd_allowtcpforwarding: "yes"
# lp_sshd_x11forwarding: "no"
# lp_sshd_config:
#  - {key: PasswordAuthentication, value: "{{ lp_sshd_passwordauthentication }}"}
#  - {key: PubkeyAuthentication, value: "{{ lp_sshd_pubkeyauthentication }}"}
#  - {key: ChallengeResponseAuthentication, value: "{{ lp_sshd_challengeresponseauthentication }}"}
#  - {key: PermitRootLogin, value: "{{ lp_sshd_permitrootlogin }}"}
#  - {key: PermitTunnel, value: "{{ lp_sshd_permittunnel }}"}
#  - {key: AllowTcpForwarding, value: "{{ lp_sshd_allowtcpforwarding }}"}
#  - {key: X11Forwarding, value: "{{ lp_sshd_x11forwarding }}"}

# Configure /etc/bluetooth/main.conf
# lp_bluetooth: true
# lp_bluetooth_ControllerMode: "bredr"
# lp_bluetooth_ControllerMode: "dual"
# lp_bluetooth_main_conf:
#  - {key: ControllerMode, value: "{{ lp_bluetooth_controllermode }}"}

# Configure xorg
# lp_xorg_conf:
#  - file: 11-Logitech-MX-Revolution-Mouse.conf
#    section:
#      - {param: Section, val1: "\"InputClass\"", val2: ""}
#      - {param: Identifier, val1: "\"Logitech MX Revolution Mouse\"",
#         val2: ""}
#      - {param: MatchProduct, val1: "\"MX Rev\"", val2: ""}
#      - {param: MatchIsPointer, val1: "\"on\"", val2: ""}
#      - {param: Driver, val1: "\"evdev\"", val2: ""}
#      - {param: Option, val1: "\"Buttonmapping\"",
#         val2: "\"1 8 3 4 5 6 7 2 9 10 11 12 13 14 15 16 17 18 19 20\""}

# Configure cron
# lp_cron_var:
#  - {user: "vlado", name: "MAILTO", value: "admin@example.com"}
# lp_cron_tab:
#  - state: "absent"
#    user: "vlado"
#    name: "Run some command"
#    minute: "01"
#    hour: "04"
#    day: "*"
#    month: "*"
#    weekday: "*"
#    command: "/usr/bin/somedirectory/somecommand"

# Configure ModemManager
# lp_modemmanager: false
# lp_modemmanager_override: "manual"

# configure gpsd
# lp_gpsd: true
# lp_gpsd_bt_rfcomm:
#  - {rfcomm: "0", bind: "yes", device: "00:1C:D9:XX:XX:XX",
#     channel: "1", comment: "BT GPS"}
# NOTE: Disable ModemManager to interfere with rfcommX

# configure postfix
# lp_postfix: true
# lp_postfix_inet_protocols: "ipv4"
# lp_postfix_main_conf:
#  - {key: inet_protocols, value: "{{ lp_postfix_inet_protocols }}"}

# smart
# lp_smart: true
# lp_smart_service_name: "smartmontools"
# lp_smart_conf_file: "/etc/smartd.conf"
# lp_smart_conf_owner: "root"
# lp_smart_conf_group: "root"
# lp_smart_conf_mode: "644"
# man smartctl
# -a Prints all SMART information about the disk.
# -o [ATA only] Enables or disables SMART automatic offline test,
#    which scans the drive every
#    four  hours  for  disk  defects.
# -S [ATA only] Enables or disables SMART autosave of device
#    vendor-specific Attributes.
# -s Schedule self-tests. Short: daily 2PM. Long: Each Saturday 3PM.
# -m Mail errors to admin.
# lp_smart_devices:
#    - { regexp: "^/dev/sda",
#        line: "/dev/sda -a -o on -S on -s (S/../.././02|L/../../6/03)
#                        -m admin" }
#    - { regexp: "^/dev/sdb",
#        line: "/dev/sdb -a -o on -S on -s (S/../.././02|L/../../6/03)
#                        -m admin" }

# lp_virtualbox: true

# lp_lid: true
# lp_lid_logind_conf: "/etc/systemd/logind.conf"
# lp_lid_upower_conf: "/etc/UPower/UPower.conf"
# lp_lid_logind_conf_vars:
#  - {var: 'HandleLidSwitch', value: 'ignore'}
#  - {var: 'LidSwitchIgnoreInhibited', value: 'no'}
# lp_lid_upower_conf_vars:
#  - {var: 'IgnoreLid', value: 'true'}

# lp_speechd: true

# lp_sudoers_owner: "root"
# lp_sudoers_group: "root"
# lp_sudoers_mode: "0440"
# Bug 1020147 - default requiretty is problematic and breaks valid usage
# https://bugzilla.redhat.com/show_bug.cgi?id=1020147
# https://www.shell-tips.com/2014/09/08/sudo-sorry-you-must-have-a-tty-to-run-sudo/
# lp_sudoers_conf:
#  - {line: "#includedir /etc/sudoers.d", state: "present"}
#  - {line: "Defaults    requiretty", state: "absent"}
# lp_sudoers_01:
#   - "admin ALL=(ALL) NOPASSWD: ALL"

# lp_networkd_conf:
#   - src: networkd.conf.j2
#     dest: /etc/systemd/networkd.conf
#     conf:
#       - section: Network
#         conf:
#           - {key: SpeedMeter, val: 'no'}
#           - {key: SpeedMeterIntervalSec, val: 10sec}
#       - section: DHCP
#         conf:
#           - {key: DUIDType, val: vendor}

# lp_netplan: true
# lp_netplan_renderer: "networkd"
# lp_netplan_conf:
#  - file: "10-ethernet.yaml"
#    category: "ethernets"
#    conf:
#      eth0:
#        optional: true
#        match:
#          macaddress: "68:f7:28:fc:a1:c4"
#        set-name: eth0
#        dhcp4: true
#      enp3s0:
#        optional: true
#        dhcp4: true
#      enp4s0:
#        optional: true
#        dhcp4: true
#  - file: "20-wifi.yaml"
#    owner: "root"
#    group: "root"
#    mode: "0640"
#    category: "wifis"
#    conf:
#      wlan2:
#        optional: True
#        dhcp6: False
#        dhcp4: True
#        access-points:
#          "network_ssid_name_1":
#            password: "**********"
#      wlp2s0b1:
#        dhcp4: no
#        dhcp6: no
#        addresses: [192.168.0.21/24]
#        gateway4: 192.168.0.1
#        nameservers:
#          addresses: [192.168.0.1, 8.8.8.8]
#        access-points:
#          "network_ssid_name_2":
#            password: "**********"
#  - file: "30-bond.yaml"
#    category: "bonds"
#    conf:
#      bond0:
#        dhcp4: yes
#        interfaces:
#          - enp3s0
#          - enp4s0
#        parameters:
#          mode: active-backup
#          primary: enp3s0
#  - file: "40-bridge.yaml"
#    category: "bridges"
#    conf:
#      xenbr0:
#        optional: true
#        addresses:
#          - 10.1.1.1/16
#        interfaces:
#          - eth0
#  - file: "50-vlan.yaml"
#    category: "vlans"
#    conf:
#      vlan15:
#        id: 15
#        link: eth0
#        addresses: ["10.3.99.5/24"]
#      vlan10:
#        id: 10
#        link: eth0
#        addresses: ["10.3.98.5/24"]
#        nameservers:
#          addresses: ["127.0.0.1"]
#          search: [domain1.example.com, domain2.example.com]

# swap
# lp_swap: true
# lp_swap_file: /usr/swap0
# lp_swap_size: 4096
# lp_swap_size: 2048
# lp_swap_size: 1536
# lp_swap_stsize: "{{ lp_swap_size * 1024 * 1024 }}"
# lp_swap_stsize: "4294967296"
# lp_swap_stsize: "2147483648"
# lp_swap_stsize: "1610612736"

# lp_timesyncd: true
# lp_timesyncd_NTP: "0.ubuntu.pool.ntp.org,
#                    1.ubuntu.pool.ntp.org,
#                    2.ubuntu.pool.ntp.org,
#                    3.ubuntu.pool.ntp.org"

# lp_gpg: true
# lp_gpg_install: true
# lp_gpg_debug: true
# lp_gpg_conf:
#   - owner: admin
#     conf:
#       - {key: keyserver, value: hkp://keyserver.ubuntu.com}
#       - {key: use-agent}
#       - {key: personal-digest-preferences, value: SHA512}
#       - {key: cert-digest-algo, value: SHA512}
#       - {key: digest-algo, value: SHA512}
#       - {key: default-preference-list, value: SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed}
#       - {key: default-key, value: <KEY-ID> }
# lp_gpg_agent_conf:
#   - owner: admin
#     conf:
#       - {key: no-grab}
#       - {key: pinentry-program, value: /usr/bin/pinentry-curses}
# lp_gpg_packages_extra:
#   - pinentry-curses

# lp_ssh_config:
#  - host: "*"
#    conf:
#      - {key: key1, value: value1}
#      - {key: key2, value: value2}

# lp_wpasupplicant_conf_global:
#  - {key: ctrl_interface, value: /run/wpa_supplicant}
#  - {key: ctrl_interface_group, value: adm}
#  - {key: fast_reauth, value: "0"}
#  - {key: update_config, value: "1"}
# lp_wpasupplicant_conf:
#  - dev: "wlan1"
#    network:
#      - conf:
#        - {key: ssid, value: '"MYSSID01"'}
#        - {key: psk, value: '"my-wifi-password"'}
#      - conf:
#        - {key: ssid, value: '"MYSSID02"'}
#        - {key: psk, value: '"my-wifi-password"'}
# lp_wpasupplicant_service_conf:
#   - path: /lib/systemd/system
#     service: wpa_supplicant@.service
#     no_extra_spaces: true
#     handlers:
#       - 'reload systemd daemon'
#       - 'reload wpa_supplicant service'
#     ini:
#       - section: Service
#         option: ExecStart
#         value: "{{ lp_wpasupplicant_bin }} -c/etc/wpa_supplicant/wpa_supplicant-%I.conf -Dnl80211,wext -i%I"

# lp_logrotate_confd:
#  - path: "ansible"
#    conf: |
#      /var/log/ansible.log {
#             weekly
#             rotate 3
#             size 10M
#             compress
#             delaycompress
#      }

# lp_iptables_input_if:
#  - {if: xenbr0, proto: tcp, port: "22", policy: ACCEPT}

# lp_libvirt: true
# lp_libvirt_guests_enable: true
# lp_libvirt_libvirtd_enable: true
# lp_libvirt_packages:
#  - libvirt-daemon-driver-storage-zfs
# lp_libvirt_conf:
#   libvirt-admin.conf: {}
#   libvirt.conf: {}
#   libvirtd.conf:
#     owner: root
#     group: root
#     mode: "0644"
#     conf:
#       - [unix_sock_group, '"libvirt"']
#       - [unix_sock_ro_perms, '"0777"']
#       - [unix_sock_rw_perms, '"0770"']
#       - [auth_unix_ro, '"none"']
#       - [auth_unix_rw, '"none"']
#   libxl.conf: {}
#   libxl-lockd.conf: {}
#   lxc.conf: {}
#   qemu.conf: {}
#   qemu-lockd.conf: {}
#   qemu-sanlock.conf: {}
#   virtlockd.conf: {}
#   virt-login-shell.conf: {}

# lp_service:
# - {name: apache2, state: stopped, enabled: false}

# lp_fstab_entries:
#   - name: /windows
#     src: /dev/sda2
#     fstype: ntfs
#     opts: ro

# lp_ufw: true
# lp_ufw_enable: true
# lp_ufw_debug: true
# lp_ufw_reset: false
# lp_ufw_reload: false
# lp_ufw_default:                                      # 1,2
#   - {key: IPV6, val: 'no'}
#   - {key: DEFAULT_FORWARD_POLICY, val: '"ACCEPT"'}
# lp_ufw_sysctl:                                       # 1,2
#   - {key: net/ipv4/ip_forward, val: 1}
# lp_ufw_blocks:                                       # 1,2
#   before.rules:
#     - mark: nat
#       insertbefore: BOF
#       block: |-
#         *nat
#         :POSTROUTING ACCEPT [0:0]
#         -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE
#         COMMIT
# lp_ufw_src_lan: '10.1.0.0/24'
# lp_ufw_conf:
#   - {default: 'deny', direction: 'incoming'}
#   - {default: 'allow', direction: 'outgoing'}
#   - {rule: 'allow', to_port: '22', proto: 'tcp', from_ip: '{{ lp_ufw_src_lan }}'}
#   - {rule: 'allow', to_port: '80', proto: 'tcp', from_ip: '{{ lp_ufw_src_lan }}'}
#   - {rule: 'allow', to_port: '443', proto: 'tcp', from_ip: '{{ lp_ufw_src_lan }}'}
#   - {rule: 'allow', to_port: '8080', proto: 'tcp', from_ip: '{{ lp_ufw_src_lan }}'}
#   - {logging: 'on'}
#   - {state: 'enabled'}
# lp_ufw_service_conf:
#   - path: /lib/systemd/system/ufw.service
#     no_extra_spaces: true
#     handlers:
#       - 'restart ufw'
#     ini:
#       - {section: Unit, option: Before, state: absent}
#       - {section: Unit, option: After, value: 'network-pre.target', state: present}
# SEE
# * 1) How to Masquerade / NAT IPv4 traffic
#   https://securitynetworkinglinux.wordpress.com/2019/07/03/how-to-masquerade-nat-ipv4-traffic-using-ufw-on-ubuntu-cli/
# * 2) Network Configuration Examples (Xen 4.1+)
#   https://wiki.xenproject.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B)#Network_Address_Translation_.28NAT.29

# lp_zfs: true
# lp_zfs_debug: true
# lp_zfs_services:
#   - {name: zfs-mount, enabled: true, state: started}
#   - {name: zfs-share, enabled: true, state: started}
#   - {name: zfs-zed, enabled: true, state: started}
# # zfs-import is masked by default
# # - {name: zfs-import, enabled: false, state: stopped}
# lp_zfs_manage:
#   - name: zroot/test1
#     state: present
#     extra_zfs_properties:
#       compression: on
#   - name: zroot/images
#     state: present
#     extra_zfs_properties:
#       compression: on
#       mountpoint: /var/lib/libvirt/images
# lp_zfs_mountpoints:
#   - mountpoint: /var/lib/libvirt/images
#     owner: root
#     group: root
#     mode: "0711"

# lp_resolvconf_confd_head:
#   - {key: nameserver, val: 8.8.8.8}
#   - {key: nameserver, val: 8.8.4.4}

# Disable NM
# lp_nm: true
# lp_nm_install: false
# lp_nm_enable: false
# lp_nm_conf:
#   - {section: ifupdown, key: managed, val: 'false'}
# lp_nm_mask: true

# Configure apt
# lp_apt: true
# lp_apt_debug: true
# lp_apt_conf:
#   - file: 10periodic
#     conf:
#       'APT::Periodic::Update-Package-Lists': '"1"'
#       'APT::Periodic::Download-Upgradeable-Packages': '"0"'
#       'APT::Periodic::AutocleanInterval': '"0"'
#   - file: 20auto-upgrades
#     conf:
#       'APT::Periodic::Update-Package-Lists': '"0"'
#       'APT::Periodic::Unattended-Upgrade': '"0"'
#   - file: 60icons
#     conf:
#       'Acquire::IndexTargets':
#         'deb::DEP-11-icons-small':
#           'DefaultEnabled': '"true"'
#         'deb::DEP-11-icons':
#           'DefaultEnabled': '"true"'

# EOF
...
